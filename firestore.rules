// TODO: Migrate from email-check to uid-check
// Allow both at first and then remove email-check later on
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSuperAdmin() {
      let oldUser = get(/databases/$(database)/documents/users/$(request.auth.token.email)).data.superadmin == true;
      let newUser = get(/databases/$(database)/documents/users/$(request.auth.token.uid)).data.superadmin == true;
      return isSignedIn() && (oldUser || newUser);
    }

    function isAdmin() {
      let oldUser = get(/databases/$(database)/documents/users/$(request.auth.token.email)).data.admin == true;
      let newUser = get(/databases/$(database)/documents/users/$(request.auth.token.uid)).data.admin == true;
      return isSignedIn() && (oldUser || newUser);
    }

    function isSignedIn() {
      // TODO: Must be a verified (whitelisted) user
      return request.auth.uid != null;
    }

    function isTeamMember() {
      let oldUser = /databases/$(database)/documents/users/$(request.auth.token.email) in resource.data.team;
      let newUser = /databases/$(database)/documents/users/$(request.auth.token.uid) in resource.data.team;
      return oldUser || newUser;
    }

    function isMemberOfParent() {
      let oldUser = /databases/$(database)/documents/users/$(request.auth.token.email) in getAfter(request.resource.data.parent).data.team;
      let newUser = /databases/$(database)/documents/users/$(request.auth.token.uid) in getAfter(request.resource.data.parent).data.team;
      return oldUser || newUser;
    }

    function isMemberOfParentDelete() {
      let oldUser = /databases/$(database)/documents/users/$(request.auth.token.email) in get(resource.data.parent).data.team;
      let newUser = /databases/$(database)/documents/users/$(request.auth.token.uid) in get(resource.data.parent).data.team;
      return oldUser || newUser;
    }

    function isMemberOfKeyResParent(document) {
      let oldUser = /databases/$(database)/documents/users/$(request.auth.token.email) in getAfter(get(/databases/$(database)/documents/keyResults/$(document)).data.parent).data.team;
      let newUser = /databases/$(database)/documents/users/$(request.auth.token.uid) in getAfter(get(/databases/$(database)/documents/keyResults/$(document)).data.parent).data.team;
      return oldUser || newUser;
    }

    function isMemberOfKpiParent(document) {
      let oldUser = /databases/$(database)/documents/users/$(request.auth.token.email) in get(get(/databases/$(database)/documents/kpis/$(document)).data.parent).data.team;
      let newUser = /databases/$(database)/documents/users/$(request.auth.token.uid) in get(get(/databases/$(database)/documents/kpis/$(document)).data.parent).data.team;
      return oldUser || newUser;
    }

    function isSelf(document) {
      let oldUser = document == request.auth.token.email;
      let newUser = document == request.auth.token.uid;
      return oldUser || newUser;
    }


    match /requestAccess/{document} {
      allow read: if isSuperAdmin();
      allow write: if true;
    }

    match /audit/{document} {
      allow read: if isSignedIn();
    }

    match /users/{user} {
      allow read: if isSignedIn();
      allow write: if isSuperAdmin() || isSelf(user);
    }

    match /organizations/{document} {
      allow read: if isSignedIn();
      allow create: if isSuperAdmin() || isTeamMember();
      allow update: if isSuperAdmin() || isTeamMember();
      allow delete: if isSuperAdmin();
    }

    match /departments/{document} {
      allow read: if isSignedIn();
      allow create: if isSuperAdmin() || isTeamMember();
      allow update: if isSuperAdmin() || isTeamMember();
      allow delete: if isSuperAdmin();
    }

    match /products/{document} {
      allow read: if isSignedIn();
      allow create: if isSuperAdmin() || isTeamMember();
      allow update: if isSuperAdmin() || isTeamMember();
      allow delete: if isSuperAdmin();
    }

    match /keyResults/{document} {
      allow read: if isSignedIn();
      allow create: if isSuperAdmin() || isMemberOfParent();
      allow update: if isSuperAdmin() || isMemberOfParent();
      allow delete: if isSuperAdmin();
    }

    match /keyResults/{document}/progress/{progress} {
      allow read: if isSignedIn();
      allow create: if isSuperAdmin() || isMemberOfKeyResParent(document);
      allow update: if isSuperAdmin() || isMemberOfKeyResParent(document);
      allow delete: if isSuperAdmin() || isMemberOfKeyResParent(document);
    }

    match /objectives/{document} {
      allow read: if isSignedIn();
      allow create: if isSuperAdmin() || isMemberOfParent();
      allow update: if isSuperAdmin() || isMemberOfParent();
      allow delete: if isSuperAdmin();
    }

    match /periods/{document} {
      allow read: if isSignedIn();
      allow create: if isSuperAdmin() || isMemberOfParent();
      allow update: if isSuperAdmin() || isMemberOfParent();
      allow delete: if isSuperAdmin();
    }

    match /kpis/{document} {
      allow read: if isSignedIn();
      allow create: if isSuperAdmin() || isMemberOfParent();
      allow update: if isSuperAdmin() || isMemberOfParent();
      allow delete: if isSuperAdmin() || isMemberOfParentDelete();
    }

    match /kpis/{document}/progress/{progress} {
      allow read: if isSignedIn();
      allow create: if false;
      allow delete: if isSuperAdmin() || isMemberOfKpiParent(document);
    }

    match /slugs/{document} {
      allow read: if true;
      allow write: if false;
    }

    match /{document=**} {
      allow read: if false;
      allow write: if false;
    }


  }
}
